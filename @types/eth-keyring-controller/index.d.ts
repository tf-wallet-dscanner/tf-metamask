/** Declaration file generated by dts-gen */

declare module 'eth-keyring-controller' {
  global {
      type Vault = {
          isUnlocked: boolean;
          keyringTypes: Array<string>;
          keyrings: any;
      } 
  }

  interface initConfig {
      keyringTypes?: any;
      initState?: any;
      encryptor?: any;
  }

  export default class KeyringController {
  
      public store: any;

      public memStore: any;

      constructor(opts: initConfig);
  
      addNewAccount(...args: any[]): void;
  
      addNewKeyring(...args: any[]): void;
  
      checkForDuplicate(...args: any[]): void;
  
      clearKeyrings(...args: any[]): void;
  
      createFirstKeyTree(...args: any[]): void;
  
      createNewVaultAndKeychain(password: string): Vault;
  
      createNewVaultAndRestore(...args: any[]): void;
  
      decryptMessage(...args: any[]): void;
  
      displayForKeyring(...args: any[]): void;
  
      exportAccount(...args: any[]): void;
  
      exportAppKeyForAddress(...args: any[]): void;
  
      forgetKeyring(...args: any[]): void;
  
      fullUpdate(): any;
  
      getAccounts(): any;
  
      getAppKeyAddress(...args: any[]): void;
  
      getEncryptionPublicKey(...args: any[]): void;
  
      getKeyringClassForType(...args: any[]): any;
  
      getKeyringForAccount(...args: any[]): any;
  
      getKeyringsByType(...args: any[]): any;
  
      persistAllKeyrings(...args: any[]): void;
  
      removeAccount(...args: any[]): void;
  
      removeEmptyKeyrings(...args: any[]): void;
  
      restoreKeyring(...args: any[]): void;
  
      setLocked(...args: any[]): void;
  
      setUnlocked(...args: any[]): void;
  
      signMessage(...args: any[]): void;
  
      signPersonalMessage(...args: any[]): void;
  
      signTransaction(...args: any[]): void;
  
      signTypedMessage(...args: any[]): void;
  
      submitPassword(...args: any[]): void;
  
      unlockKeyrings(...args: any[]): void;
  
      verifyPassword(...args: any[]): void;
  
      static captureRejectionSymbol: any;
  
      static captureRejections: boolean;
  
      static defaultMaxListeners: number;
  
      static errorMonitor: any;
  
      static getEventListeners(emitterOrTarget: any, type: any): any;
  
      static init(opts: any): void;
  
      static kMaxEventTargetListeners: any;
  
      static kMaxEventTargetListenersWarned: any;
  
      static listenerCount(emitter: any, type: any): any;
  
      on(emitter: any, event: any, options?: any): any;
  
      static once(emitter: any, name: any, options: any): any;
  
      static setMaxListeners(n: any, eventTargets: any): void;
  
      static usingDomains: boolean;
  
  }
  class EventEmitter {
      constructor(opts: any);

      addListener(type: any, listener: any): any;

      emit(type: any, args: any): any;

      eventNames(): any;

      getMaxListeners(): any;

      listenerCount(type: any): any;

      listeners(type: any): any;

      off(type: any, listener: any): any;

      on(type: any, listener: any): any;

      once(type: any, listener: any): any;

      prependListener(type: any, listener: any): any;

      prependOnceListener(type: any, listener: any): any;

      rawListeners(type: any): any;

      removeAllListeners(type: any, ...args: any[]): any;

      removeListener(type: any, listener: any): any;

      setMaxListeners(n: any): any;

      static EventEmitter: any;

      static captureRejectionSymbol: any;

      static captureRejections: boolean;

      static defaultMaxListeners: number;

      static errorMonitor: any;

      static getEventListeners(emitterOrTarget: any, type: any): any;

      static init(opts: any): void;

      static kMaxEventTargetListeners: any;

      static kMaxEventTargetListenersWarned: any;

      static listenerCount(emitter: any, type: any): any;

      static on(emitter: any, event: any, options: any): any;

      static once(emitter: any, name: any, options: any): any;

      static setMaxListeners(n: any, eventTargets: any): void;

      static usingDomains: boolean;

  }
}
